Типизация данных Типобезопасность Вывод типов Статическая типизация Динамическая типизация Последовательная типизация Сильная типизация Зависимые типы Утиная типизация Стати́ческая типиза́ция — приём, широко используемый в языках программирования , при котором переменная , параметр подпрограммы, возвращаемое значение функции связывается с типом в момент объявления и тип не может быть изменён позже (переменная или параметр будут принимать, а функция — возвращать значения только этого типа). Примеры статически типизированных языков — Ада , Си , C++ , C# , D , Java , ML , Паскаль , Solidity , Go , Фортран .
Противоположный приём — динамическая типизация . Некоторые статически типизированные языки позже получили возможность также использовать динамическую типизацию при помощи специальных подсистем. Например, Variant в Delphi , пакеты в AliceML [ 1 ] , Data.Dynamic в Haskell [ 2 ] . Статическая типизация даёт самый простой машинный код , поэтому она удобна для языков, дающих исполняемые файлы операционных систем или JIT-компилируемые промежуточные коды . Многие ошибки исключаются уже на стадии компиляции, поэтому статическая типизация хороша для написания сложного, но быстрого кода. В интегрированной среде разработки осуществимо более релевантное автодополнение , особенно если типизация — сильная статическая: множество вариантов можно отбросить как не подходящие по типу. Чем больше и сложнее проект, тем большее преимущество даёт статическая типизация, и наоборот. В то же время, статически типизированные языки с недостаточно проработанной математической базой оказываются довольно многословными: каждый раз надо указывать, какой тип будет иметь переменная. В некоторых языках есть автоматическое выведение типа , однако оно может привести к трудноуловимым ошибкам. Это не верно для языков семейства ML , основанных на так называемой «главной типизации» ( англ. principal typing scheme [ 3 ] ), которая одновременно автоматически выводит наиболее общий тип всякого выражения и строго проверяет согласование типов зависимостей. Это придаёт языку выразительность динамически типизируемых, при этом обеспечивает лучшее быстродействие и типобезопасность [ 3 ] . Примечания [ править | править код ] ↑ AliceML packages (неопр.) . Дата обращения: 13 февраля 2015. Архивировано 15 февраля 2015 года. ↑ Dynamic in Haskell (неопр.) . Дата обращения: 13 февраля 2015. Архивировано 13 февраля 2015 года. ↑ 1 2 Pierce, 2012 , 22 Реконструкция типов, с. 360—361. Литература [ править | править код ] Pierce, Benjamin C. Types and Programming Languages . — MIT Press , 2002. — ISBN 0-262-16209-1 . Перевод на русский язык: Пирс Б. Типы в языках программирования. — Добросвет , 2012. — 680 с. — ISBN 978-5-7913-0082-9 . Для улучшения этой статьи желательно : Проставить сноски , внести более точные указания на источники. Найти и оформить в виде сносок ссылки на независимые авторитетные источники , подтверждающие написанное . После исправления проблемы исключите её из списка. Удалите шаблон, если устранены все недостатки. Источник — https://ru.wikipedia.org/w/index.php?title=Статическая_типизация&oldid=140294444