import random
import tkinter as tk
from tkinter import messagebox

KEY_SIZE = 16  # Размер ключа (128 бит)
BLOCK_SIZE = 16  # Размер блока (128 бит)
NUM_ROUNDS = 16  # Количество раундов

# S-боксы из Appendix A.1 RFC 4009
S0 = [
    0xA9, 0x85, 0xD6, 0xD3, 0x54, 0x1D, 0xAC, 0x25, 0x5D, 0x43, 0x18, 0x1E, 0x51, 0xFC, 0xCA, 0x63,
    0x28, 0x44, 0x20, 0x9D, 0xE0, 0xE2, 0xC8, 0x17, 0xA5, 0x8F, 0x03, 0x7B, 0xBB, 0x13, 0xD2, 0xEE,
    0x70, 0x8C, 0x3F, 0xA8, 0x32, 0xDD, 0xF6, 0x74, 0xEC, 0x95, 0x0B, 0x57, 0x5C, 0x5B, 0xBD, 0x01,
    0x24, 0x1C, 0x73, 0x98, 0x10, 0xCC, 0xF2, 0xD9, 0x2C, 0xE7, 0x72, 0x83, 0x9B, 0xD1, 0x86, 0xC9,
    0x60, 0x50, 0xA3, 0xEB, 0x0D, 0xB6, 0x9E, 0x4F, 0xB7, 0x5A, 0xC6, 0x78, 0xA6, 0x12, 0xAF, 0xD5,
    0x61, 0xC3, 0xB4, 0x41, 0x52, 0x7D, 0x8D, 0x08, 0x1F, 0x99, 0x00, 0x19, 0x04, 0x53, 0xF7, 0xE1,
    0xFD, 0x76, 0x2F, 0x27, 0xB0, 0x8B, 0x0E, 0xAB, 0xA2, 0x6E, 0x93, 0x4D, 0x69, 0x7C, 0x09, 0x0A,
    0xBF, 0xEF, 0xF3, 0xC5, 0x87, 0x14, 0xFE, 0x64, 0xDE, 0x2E, 0x4B, 0x1A, 0x06, 0x21, 0x6B, 0x66,
    0x02, 0xF5, 0x92, 0x8A, 0x0C, 0xB3, 0x7E, 0xD0, 0x7A, 0x47, 0x96, 0xE5, 0x26, 0x80, 0xAD, 0xDF,
    0xA1, 0x30, 0x37, 0xAE, 0x36, 0x15, 0x22, 0x38, 0xF4, 0xA7, 0x45, 0x4C, 0x81, 0xE9, 0x84, 0x97,
    0x35, 0xCB, 0xCE, 0x3C, 0x71, 0x11, 0xC7, 0x89, 0x75, 0xFB, 0xDA, 0xF8, 0x94, 0x59, 0x82, 0xC4,
    0xFF, 0x49, 0x39, 0x67, 0xC0, 0xCF, 0xD7, 0xB8, 0x0F, 0x8E, 0x42, 0x23, 0x91, 0x6C, 0xDB, 0xA4,
    0x34, 0xF1, 0x48, 0xC2, 0x6F, 0x3D, 0x2D, 0x40, 0xBE, 0x3E, 0xBC, 0xC1, 0xAA, 0xBA, 0x4E, 0x55,
    0x3B, 0xDC, 0x68, 0x7F, 0x9C, 0xD8, 0x4A, 0x56, 0x77, 0xA0, 0xED, 0x46, 0xB5, 0x2B, 0x65, 0xFA,
    0xE3, 0xB9, 0xB1, 0x9F, 0x5E, 0xF9, 0xE6, 0xB2, 0x31, 0xEA, 0x6D, 0x5F, 0xE4, 0xF0, 0xCD, 0x88,
    0x16, 0x3A, 0x58, 0xD4, 0x62, 0x29, 0x07, 0x33, 0xE8, 0x1B, 0x05, 0x79, 0x90, 0x6A, 0x2A, 0x9A
]

S1 = [
    0x38, 0xE8, 0x2D, 0xA6, 0xCF, 0xDE, 0xB3, 0xB8, 0xAF, 0x60, 0x55, 0xC7, 0x44, 0x6F, 0x6B, 0x5B,
    0xC3, 0x62, 0x33, 0xB5, 0x29, 0xA0, 0xE2, 0xA7, 0xD3, 0x91, 0x11, 0x06, 0x1C, 0xBC, 0x36, 0x4B,
    0xEF, 0x88, 0x6C, 0xA8, 0x17, 0xC4, 0x16, 0xF4, 0xC2, 0x45, 0xE1, 0xD6, 0x3F, 0x3D, 0x8E, 0x98,
    0x28, 0x4E, 0xF6, 0x3E, 0xA5, 0xF9, 0x0D, 0xDF, 0xD8, 0x2B, 0x66, 0x7A, 0x27, 0x2F, 0xF1, 0x72,
    0x42, 0xD4, 0x41, 0xC0, 0x73, 0x67, 0xAC, 0x8B, 0xF7, 0xAD, 0x80, 0x1F, 0xCA, 0x2C, 0xAA, 0x34,
    0xD2, 0x0B, 0xEE, 0xE9, 0x5D, 0x94, 0x18, 0xF8, 0x57, 0xAE, 0x08, 0xC5, 0x13, 0xCD, 0x86, 0xB9,
    0xFF, 0x7D, 0xC1, 0x31, 0xF5, 0x8A, 0x6A, 0xB1, 0xD1, 0x20, 0xD7, 0x02, 0x22, 0x04, 0x68, 0x71,
    0x07, 0xDB, 0x9D, 0x99, 0x61, 0xBE, 0xE6, 0x59, 0xDD, 0x51, 0x90, 0xDC, 0x9A, 0xA3, 0xAB, 0xD0,
    0x81, 0x0F, 0x47, 0x1A, 0xE3, 0xEC, 0x8D, 0xBF, 0x96, 0x7B, 0x5C, 0xA2, 0xA1, 0x63, 0x23, 0x4D,
    0xC8, 0x9E, 0x9C, 0x3A, 0x0C, 0x2E, 0xBA, 0x6E, 0x9F, 0x5A, 0xF2, 0x92, 0xF3, 0x49, 0x78, 0xCC,
    0x15, 0xFB, 0x70, 0x75, 0x7F, 0x35, 0x10, 0x03, 0x64, 0x6D, 0xC6, 0x74, 0xD5, 0xB4, 0xEA, 0x09,
    0x76, 0x19, 0xFE, 0x40, 0x12, 0xE0, 0xBD, 0x05, 0xFA, 0x01, 0xF0, 0x2A, 0x5E, 0xA9, 0x56, 0x43,
    0x85, 0x14, 0x89, 0x9B, 0xB0, 0xE5, 0x48, 0x79, 0x97, 0xFC, 0x1E, 0x82, 0x21, 0x8C, 0x1B, 0x5F,
    0x77, 0x54, 0xB2, 0x1D, 0x25, 0x4F, 0x00, 0x46, 0xED, 0x58, 0x52, 0xEB, 0x7E, 0xDA, 0xC9, 0xFD,
    0x30, 0x95, 0x65, 0x3C, 0xB6, 0xE4, 0xBB, 0x7C, 0x0E, 0x50, 0x39, 0x26, 0x32, 0x84, 0x69, 0x93,
    0x37, 0xE7, 0x24, 0xA4, 0xCB, 0x53, 0x0A, 0x87, 0xD9, 0x4C, 0x83, 0x8F, 0xCE, 0x3B, 0x4A, 0xB7
]

# Константы KC из Section 2.3
KC = [
    0x9e3779b9, 0x3c6ef373, 0x78dde6e6, 0xf1bbcdcc, 0xe3779b99, 0xc6ef3733, 0x8dde6e67, 0x1bbcdccf,
    0x3779b99e, 0x6ef3733c, 0xdde6e678, 0xbbcdccf1, 0x779b99e3, 0xef3733c6, 0xde6e678d, 0xbcdccf1b
]

def generate_key():
    """Генерирует случайный 128-битный ключ."""
    key = bytes(random.randint(0, 255) for _ in range(KEY_SIZE))
    entry_key.delete(0, tk.END)
    entry_key.insert(0, key.hex().upper())

def g_function(value):
    """Функция G из Section 2.2."""
    # Разбиваем 32-битное значение на 4 байта
    x = [(value >> (i * 8)) & 0xFF for i in range(4)]
    # Применяем S0 и S1 к каждому байту с масками
    z0 = (S0[x[0]] & 0xFC) ^ (S1[x[1]] & 0xF3) ^ (S0[x[2]] & 0xCF) ^ (S1[x[3]] & 0x3F)
    z1 = (S0[x[0]] & 0xF3) ^ (S1[x[1]] & 0xCF) ^ (S0[x[2]] & 0x3F) ^ (S1[x[3]] & 0xFC)
    z2 = (S0[x[0]] & 0xCF) ^ (S1[x[1]] & 0x3F) ^ (S0[x[2]] & 0xFC) ^ (S1[x[3]] & 0xF3)
    z3 = (S0[x[0]] & 0x3F) ^ (S1[x[1]] & 0xFC) ^ (S0[x[2]] & 0xF3) ^ (S1[x[3]] & 0xCF)
    # Собираем обратно в 32-битное значение
    return (z0 << 24) | (z1 << 16) | (z2 << 8) | z3

def key_schedule(key):
    """Генерация раундовых ключей (Section 2.3)."""
    key_bytes = bytes.fromhex(key)
    # Разбиваем 128-битный ключ на четыре 32-битных блока
    key_blocks = [int.from_bytes(key_bytes[i:i+4], 'big') for i in range(0, 16, 4)]
    subkeys = []
    
    for i in range(NUM_ROUNDS):
        # Генерация Ki0 и Ki1
        ki0 = g_function((key_blocks[0] + key_blocks[2] - KC[i]) & 0xFFFFFFFF)
        ki1 = g_function((key_blocks[1] - key_blocks[3] + KC[i]) & 0xFFFFFFFF)
        subkeys.append((ki0, ki1))
        
        # Сдвиги ключей
        if i % 2 == 0:  # Чётный раунд
            key_blocks[2] = ((key_blocks[2] << 8) | (key_blocks[2] >> 24)) & 0xFFFFFFFF
            key_blocks[3] = ((key_blocks[3] << 8) | (key_blocks[3] >> 24)) & 0xFFFFFFFF
        else:  # Нечётный раунд
            key_blocks[0] = ((key_blocks[0] >> 8) | (key_blocks[0] << 24)) & 0xFFFFFFFF
            key_blocks[1] = ((key_blocks[1] >> 8) | (key_blocks[1] << 24)) & 0xFFFFFFFF
    
    return subkeys

def f_function(r0, r1, ki0, ki1):
    """Раундовая функция F из Section 2.1."""
    t0 = (r0 ^ ki0) & 0xFFFFFFFF
    t1 = (r1 ^ ki1) & 0xFFFFFFFF
    t = g_function((t0 ^ t1) & 0xFFFFFFFF)
    t = (t + t0) & 0xFFFFFFFF
    t = g_function(t)
    t = (t + t1) & 0xFFFFFFFF
    return g_function(t)

def seed_encrypt_block(block, key):
    """Шифрование одного блока (Section 2)."""
    # Разбиваем 128-битный блок на два 64-битных
    l = int.from_bytes(block[:8], 'big')
    r = int.from_bytes(block[8:], 'big')
    subkeys = key_schedule(key)
    
    for i in range(NUM_ROUNDS):
        ki0, ki1 = subkeys[i]
        l_new = r
        r_new = l ^ f_function(r >> 32, r & 0xFFFFFFFF, ki0, ki1)
        l, r = l_new, r_new
    
    return (l.to_bytes(8, 'big') + r.to_bytes(8, 'big'))

def seed_decrypt_block(block, key):
    """Расшифрование одного блока (Section 2.4)."""
    l = int.from_bytes(block[:8], 'big')
    r = int.from_bytes(block[8:], 'big')
    subkeys = key_schedule(key)[::-1]  # Обратный порядок ключей
    
    for i in range(NUM_ROUNDS):
        ki0, ki1 = subkeys[i]
        r_new = l
        l_new = r ^ f_function(l >> 32, l & 0xFFFFFFFF, ki0, ki1)
        l, r = l_new, r_new
    
    return (l.to_bytes(8, 'big') + r.to_bytes(8, 'big'))

def pad(text):
    padding_len = BLOCK_SIZE - len(text) % BLOCK_SIZE
    return text + bytes([padding_len] * padding_len)

def unpad(text):
    return text[:-text[-1]]

def process_text(encrypting=True):
    key = entry_key.get().strip()
    
    try:
        if encrypting:
            text = entry_text.get("1.0", tk.END).strip().encode()
            padded_text = pad(text)
            encrypted_blocks = [
                seed_encrypt_block(padded_text[i:i + BLOCK_SIZE], key)
                for i in range(0, len(padded_text), BLOCK_SIZE)
            ]
            result_text = b"".join(encrypted_blocks).hex().upper()
        else:
            text = bytes.fromhex(entry_result.get("1.0", tk.END).strip())
            decrypted_blocks = [
                seed_decrypt_block(text[i:i + BLOCK_SIZE], key)
                for i in range(0, len(text), BLOCK_SIZE)
            ]
            result_text = unpad(b"".join(decrypted_blocks)).decode()
    except Exception as e:
        messagebox.showerror("Ошибка", f"Неверный ввод: {str(e)}")
        return

    entry_result.delete("1.0", tk.END)
    entry_result.insert("1.0", result_text)

def create_label(parent, text, row, column):
    tk.Label(parent, text=text).grid(row=row, column=column, sticky="w", padx=10, pady=5)

def create_text_widget(parent, height, width, row, columnspan):
    widget = tk.Text(parent, height=height, width=width)
    widget.grid(row=row, column=0, columnspan=columnspan, padx=10)
    return widget

def create_button(parent, text, command, row, column, columnspan=1):
    tk.Button(parent, text=text, command=command).grid(row=row, column=column, columnspan=columnspan, padx=10, pady=5)

root = tk.Tk()
root.title("Шифр SEED")
root.resizable(False, False)

create_label(root, "Введите текст:", 0, 0)
entry_text = create_text_widget(root, 4, 50, 1, 2)

create_label(root, "Сгенерированный ключ:", 2, 0)
entry_key = tk.Entry(root, width=35)
entry_key.grid(row=2, column=1, padx=10)

create_button(root, "Сгенерировать ключ", generate_key, 2, 2)
create_button(root, "Зашифровать", lambda: process_text(True), 3, 0)
create_button(root, "Расшифровать", lambda: process_text(False), 3, 1)

create_label(root, "Результат:", 4, 0)
entry_result = create_text_widget(root, 4, 50, 5, 2)

generate_key()

root.update_idletasks()
root.geometry(f"{root.winfo_reqwidth() + 20}x{root.winfo_reqheight() + 20}")

root.mainloop()